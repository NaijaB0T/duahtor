---
export const prerender = false;

// --- START: SERVER-SIDE AUTHENTICATION ---

// 1. Get credentials from your Cloudflare environment variables
const ADMIN_USERNAME = Astro.locals.runtime?.env?.ADMIN_USERNAME;
const ADMIN_PASSWORD = Astro.locals.runtime?.env?.ADMIN_PASSWORD;

// 2. Server-side check: If variables aren't set, block access
// This prevents the page from being public if you forget to configure them.
if (!ADMIN_USERNAME || !ADMIN_PASSWORD) {
  return new Response(
    "Authentication credentials are not configured on the server. Please set ADMIN_USERNAME and ADMIN_PASSWORD.",
    { status: 500 }
  );
}

// 3. Check for the 'Authorization' header in the incoming request
const authHeader = Astro.request.headers.get('Authorization');
let isAuthenticated = false;

if (authHeader) {
  const authType = authHeader.split(' ')[0];
  // We are using "Basic" authentication
  if (authType === 'Basic') {
    const encodedCredentials = authHeader.split(' ')[1];
    try {
      // Decode the Base64 credentials to "username:password"
      const [user, pass] = atob(encodedCredentials).split(':');
      
      // 4. Compare provided credentials with your environment variables
      if (user === ADMIN_USERNAME && pass === ADMIN_PASSWORD) {
        isAuthenticated = true;
      }
    } catch (e) {
      // Handle cases where decoding fails
      console.error("Error decoding authentication credentials:", e);
    }
  }
}

// 5. If authentication fails, send a 401 Unauthorized response
// This is what triggers the browser's username/password login pop-up.
if (!isAuthenticated) {
  return new Response('Unauthorized', {
    status: 401,
    headers: {
      'WWW-Authenticate': 'Basic realm="Secure Admin Dashboard"',
    },
  });
}
// --- END: SERVER-SIDE AUTHENTICATION ---


// If the code reaches this point, the user is authenticated.
// The rest of your original code now runs.

const authenticatedUser = ADMIN_USERNAME; // Display the logged-in user

// Get waitlist data from D1 database
let waitlistData = [];
let foundingSupportersData = [];
let error = null;

try {
  const DB = Astro.locals.runtime?.env?.DB;

  if (DB) {
    const waitlistResult = await DB.prepare(
      'SELECT * FROM waitlist ORDER BY created_at DESC'
    ).all();
    const supportersResult = await DB.prepare(
      'SELECT * FROM founding_supporters ORDER BY payment_date DESC'
    ).all();

    waitlistData = waitlistResult.results || [];
    foundingSupportersData = supportersResult.results || [];

  } else {
    error = 'Database not available';
  }
} catch (e) {
  error = e.message;
}

const formatDate = (dateString) => {
  return new Date(dateString).toLocaleString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

const formatDateOnly = (dateString) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
};

const formatCurrency = (amount) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
};
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DUAHTOR Waitlist Admin</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      border-radius: 12px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
      color: white;
      padding: 30px;
      text-align: center;
    }
    .header h1 {
      font-size: 2.5rem;
      margin-bottom: 10px;
    }
    .header p {
      opacity: 0.9;
      font-size: 1.1rem;
    }
    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      padding: 30px;
      background: #f8f9fa;
    }
    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 8px;
      text-align: center;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .stat-number {
      font-size: 2rem;
      font-weight: bold;
      color: #2a5298;
      margin-bottom: 5px;
    }
    .stat-label {
      color: #666;
      font-size: 0.9rem;
    }
    .content {
      padding: 30px;
    }
    .table-container {
      overflow-x: auto;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: white;
    }
    th {
      background: #2a5298;
      color: white;
      padding: 15px 12px;
      text-align: left;
      font-weight: 600;
    }
    td {
      padding: 12px;
      border-bottom: 1px solid #eee;
    }
    tr:hover {
      background: #f8f9fa;
    }
    .role-badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
    }
    .role-student { background: #e3f2fd; color: #1976d2; }
    .role-parent { background: #f3e5f5; color: #7b1fa2; }
    .role-educator { background: #e8f5e8; color: #388e3c; }
    .role-other { background: #fff3e0; color: #f57c00; }
    .contact {
      font-family: 'Courier New', monospace;
      font-size: 0.9rem;
    }
    .error {
      background: #ffebee;
      color: #c62828;
      padding: 20px;
      margin: 20px;
      border-radius: 8px;
      border-left: 4px solid #c62828;
    }
    .no-data {
      text-align: center;
      padding: 40px;
      color: #666;
    }
    .refresh-btn {
      background: #2a5298;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      margin-bottom: 20px;
      transition: background 0.3s;
    }
    .refresh-btn:hover {
      background: #1e3c72;
    }
    .section-header {
      background: linear-gradient(135deg, #2a5298 0%, #1e3c72 100%);
      color: white;
      padding: 20px;
      margin: 30px 0 0 0;
      border-radius: 8px 8px 0 0;
      font-size: 1.2rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .section-content {
      margin-top: 0;
    }
    .amount-highlight {
      font-weight: bold;
      color: #2a5298;
    }
    .tshirt-badge {
      background: #f0f0f0;
      color: #333;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 500;
    }
    .add-supporter-form {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin: 20px 0;
      border: 2px dashed #ddd;
    }
    .form-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }
    .form-group {
      display: flex;
      flex-direction: column;
    }
    .form-group label {
      font-weight: 600;
      color: #333;
      margin-bottom: 5px;
    }
    .form-group input,
    .form-group select,
    .form-group textarea {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 1rem;
    }
    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: #2a5298;
    }
    .form-actions {
      display: flex;
      gap: 10px;
    }
    .btn-primary {
      background: #2a5298;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      transition: background 0.3s;
    }
    .btn-primary:hover {
      background: #1e3c72;
    }
    .btn-secondary {
      background: #6c757d;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      transition: background 0.3s;
    }
    .btn-secondary:hover {
      background: #5a6268;
    }
    .toggle-form-btn {
      background: #28a745;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      margin-bottom: 20px;
      transition: background 0.3s;
    }
    .toggle-form-btn:hover {
      background: #218838;
    }
    .hidden {
      display: none;
    }
    .auth-info {
      background: #e8f5e8;
      color: #2e7d32;
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e0e0e0;
    }
    .auth-status {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .auth-badge {
      background: #4caf50;
      color: white;
      padding: 4px 12px;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 500;
    }
    @media (max-width: 768px) {
      .header h1 {
        font-size: 2rem;
      }
      .stats {
        grid-template-columns: 1fr 1fr;
        padding: 20px;
      }
      .content {
        padding: 20px;
      }
      th, td {
        padding: 8px 6px;
        font-size: 0.9rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>🎯 DUAHTOR Admin Dashboard</h1>
      <p>Waitlist & Founding Supporters Management</p>
    </div>
    
    <div class="auth-info">
      <div class="auth-status">
        <span class="auth-badge">🔒 Authenticated</span>
        <span>Logged in as: <strong>{authenticatedUser}</strong></span>
      </div>
      <div>
        <small>Secure Admin Access</small>
      </div>
    </div>

    {error ? (
      <div class="error">
        <strong>Error:</strong> {error}
      </div>
    ) : (
      <>
        <div class="stats">
          <div class="stat-card">
            <div class="stat-number">{waitlistData.length}</div>
            <div class="stat-label">Total Registrations</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{waitlistData.filter(item => item.role === 'student').length}</div>
            <div class="stat-label">Students</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{waitlistData.filter(item => item.role === 'parent').length}</div>
            <div class="stat-label">Parents</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{waitlistData.filter(item => item.role === 'educator').length}</div>
            <div class="stat-label">Educators</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{foundingSupportersData.length}</div>
            <div class="stat-label">Founding Supporters</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{formatCurrency(foundingSupportersData.reduce((sum, supporter) => sum + parseFloat(supporter.amount_paid || 0), 0))}</div>
            <div class="stat-label">Total Raised</div>
          </div>
        </div>
        
        <div class="content">
          <button class="refresh-btn" onclick="window.location.reload()">
            🔄 Refresh Data
          </button>
          
          <div class="section-header">
            👥 Waitlist Registrations
          </div>
          
          {waitlistData.length === 0 ? (
            <div class="no-data">
              <h3>No registrations yet</h3>
              <p>Waitlist submissions will appear here once users start signing up.</p>
            </div>
          ) : (
            <div class="table-container section-content">
              <table>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Full Name</th>
                    <th>Contact</th>
                    <th>Role</th>
                    <th>County</th>
                    <th>Country</th>
                    <th>T-Shirt Size</th>
                    <th>Registered</th>
                  </tr>
                </thead>
                <tbody>
                  {waitlistData.map((user) => (
                    <tr key={user.id}>
                      <td>#{user.id}</td>
                      <td><strong>{user.full_name}</strong></td>
                      <td class="contact">{user.contact}</td>
                      <td>
                        <span class={`role-badge role-${user.role}`}>
                          {user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                        </span>
                      </td>
                      <td>{user.county.charAt(0).toUpperCase() + user.county.slice(1)}</td>
                      <td>{user.country || '-'}</td>
                      <td>
                        {user.tshirt_size ? (
                          <span class="tshirt-badge">{user.tshirt_size}</span>
                        ) : '-'}
                      </td>
                      <td>{formatDate(user.created_at)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}

          <div class="section-header">
            ⭐ Founding Supporters
          </div>
          
          <button class="toggle-form-btn" onclick="toggleSupporterForm()">
            ➕ Add New Founding Supporter
          </button>
          
          <div id="supporter-form" class="add-supporter-form hidden">
            <form id="new-supporter-form">
              <div class="form-grid">
                <div class="form-group">
                  <label for="fullName">Full Name *</label>
                  <input type="text" id="fullName" name="fullName" required>
                </div>
                <div class="form-group">
                  <label for="contact">Email or Phone *</label>
                  <input type="text" id="contact" name="contact" required>
                </div>
                <div class="form-group">
                  <label for="amountPaid">Amount Paid ($) *</label>
                  <input type="number" id="amountPaid" name="amountPaid" step="0.01" min="0" required>
                </div>
                <div class="form-group">
                  <label for="paymentDate">Payment Date *</label>
                  <input type="date" id="paymentDate" name="paymentDate" required>
                </div>
                <div class="form-group">
                  <label for="tshirtSize">T-Shirt Size</label>
                  <select id="tshirtSize" name="tshirtSize">
                    <option value="">Select Size</option>
                    <option value="XS">XS</option>
                    <option value="S">S</option>
                    <option value="M">M</option>
                    <option value="L">L</option>
                    <option value="XL">XL</option>
                    <option value="XXL">XXL</option>
                  </select>
                </div>
                <div class="form-group">
                  <label for="paymentMethod">Payment Method</label>
                  <select id="paymentMethod" name="paymentMethod">
                    <option value="">Select Method</option>
                    <option value="Credit Card">Credit Card</option>
                    <option value="Bank Transfer">Bank Transfer</option>
                    <option value="PayPal">PayPal</option>
                    <option value="Mobile Money">Mobile Money</option>
                    <option value="Cash">Cash</option>
                    <option value="Other">Other</option>
                  </select>
                </div>
              </div>
              <div class="form-group">
                <label for="notes">Additional Notes</label>
                <textarea id="notes" name="notes" rows="3" placeholder="Any additional information..."></textarea>
              </div>
              <div class="form-actions">
                <button type="submit" class="btn-primary">💾 Save Supporter</button>
                <button type="button" class="btn-secondary" onclick="toggleSupporterForm()">Cancel</button>
              </div>
            </form>
          </div>
          
          {foundingSupportersData.length === 0 ? (
            <div class="no-data">
              <h3>No founding supporters yet</h3>
              <p>Founding supporter data will appear here once payments are recorded.</p>
            </div>
          ) : (
            <div class="table-container section-content">
              <table>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Full Name</th>
                    <th>Contact</th>
                    <th>Amount Paid</th>
                    <th>Payment Date</th>
                    <th>T-Shirt Size</th>
                    <th>Payment Method</th>
                    <th>Notes</th>
                    <th>Recorded</th>
                  </tr>
                </thead>
                <tbody>
                  {foundingSupportersData.map((supporter) => (
                    <tr key={supporter.id}>
                      <td>#{supporter.id}</td>
                      <td><strong>{supporter.full_name}</strong></td>
                      <td class="contact">{supporter.contact}</td>
                      <td class="amount-highlight">{formatCurrency(supporter.amount_paid)}</td>
                      <td>{formatDateOnly(supporter.payment_date)}</td>
                      <td>
                        {supporter.tshirt_size ? (
                          <span class="tshirt-badge">{supporter.tshirt_size}</span>
                        ) : '-'}
                      </td>
                      <td>{supporter.payment_method || '-'}</td>
                      <td>{supporter.notes || '-'}</td>
                      <td>{formatDate(supporter.created_at)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </>
    )}
  </div>

  <script>
    function toggleSupporterForm() {
      const form = document.getElementById('supporter-form');
      const button = document.querySelector('.toggle-form-btn');
      
      if (form.classList.contains('hidden')) {
        form.classList.remove('hidden');
        button.textContent = '❌ Cancel Add Supporter';
      } else {
        form.classList.add('hidden');
        button.textContent = '➕ Add New Founding Supporter';
        document.getElementById('new-supporter-form').reset();
      }
    }

    document.getElementById('new-supporter-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData.entries());
      
      try {
        const response = await fetch('/api/founding-supporters', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (response.ok) {
          alert('✅ ' + result.message);
          window.location.reload();
        } else {
          alert('❌ Error: ' + result.error);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('❌ An error occurred while saving the supporter data. Please try again.');
      }
    });
  </script>

</body>
</html>